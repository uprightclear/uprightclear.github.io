<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uprightclear</title>
    <link>uprightclear.github.io/</link>
    <description>Recent content on uprightclear</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>除非特别声明，本站采用[Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).</copyright>
    <lastBuildDate>Thu, 07 May 2020 10:02:26 +0800</lastBuildDate>
    
	<atom:link href="uprightclear.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Markdown基础语法</title>
      <link>uprightclear.github.io/2020/05/markdown-grammar/</link>
      <pubDate>Thu, 07 May 2020 10:02:26 +0800</pubDate>
      
      <guid>uprightclear.github.io/2020/05/markdown-grammar/</guid>
      <description>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。
相比WYSIWYG编辑器
优点： 1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。 2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可
缺点： 1、需要记一些语法（当然，是很简单。五分钟学会）。 2、有些平台不支持Markdown编辑模式。
一、标题 在想要设置为标题的文字前面加#来表示 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。
注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。
示例：
# 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 效果如下：
这是一级标题 这是二级标题 这是三级标题 这是四级标题 这是五级标题 这是六级标题 二、字体 加粗 要加粗的文字左右分别用两个*号包起来
斜体 要倾斜的文字左右分别用一个*号包起来
斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来
删除线 要加删除线的文字左右分别用两个~~号包起来
示例：
**这是加粗的文字** *这是倾斜的文字*` ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ 效果如下：
这是加粗的文字
这是倾斜的文字`
这是斜体加粗的文字</description>
    </item>
    
    <item>
      <title>Leetcode 刷题报告 #13</title>
      <link>uprightclear.github.io/2020/05/leetcode04/</link>
      <pubDate>Thu, 07 May 2020 08:38:00 +0800</pubDate>
      
      <guid>uprightclear.github.io/2020/05/leetcode04/</guid>
      <description>13.罗马数字转整数 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
   字符 数值     I 1   V 5   X 10   L 50   C 100   D 500   M 1000    例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。</description>
    </item>
    
    <item>
      <title>Leetcode 刷题报告 #9</title>
      <link>uprightclear.github.io/2020/05/leetcode03/</link>
      <pubDate>Thu, 07 May 2020 08:11:14 +0800</pubDate>
      
      <guid>uprightclear.github.io/2020/05/leetcode03/</guid>
      <description>9.回文数 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
示例 1:
输入: 121 输出: true
示例 2:
输入: -121 输出: false 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:
输入: 10 输出: false 解释: 从右向左读, 为 01 。因此它不是一个回文数。
题解(Java) class Solution { public boolean isPalindrome(int x) { if(x &amp;lt; 0) return false; int cur = 0; int num = x; while(num !</description>
    </item>
    
    <item>
      <title>Leetcode 刷题报告 #7</title>
      <link>uprightclear.github.io/2020/05/leetcode02/</link>
      <pubDate>Wed, 06 May 2020 08:31:40 +0800</pubDate>
      
      <guid>uprightclear.github.io/2020/05/leetcode02/</guid>
      <description>7.整数反转 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
示例 1:
输入: 123 输出: 321
示例 2:
输入: -123 输出: -321
示例 3:
输入: 120 输出: 21
注意:
假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/reverse-integer 著作权归领扣网络所有。
题解(Java) class Solution { public int reverse(int x) { int ans = 0; while (x != 0) { if ((ans * 10) / 10 !</description>
    </item>
    
    <item>
      <title>关于如何更新hugo博客</title>
      <link>uprightclear.github.io/2020/05/update/</link>
      <pubDate>Tue, 05 May 2020 18:06:46 +0800</pubDate>
      
      <guid>uprightclear.github.io/2020/05/update/</guid>
      <description>创建新的markdown文件 hugo new posts/abcd.md 1.该命令执行后会在当前项目文件夹下posts目录中自动生成 abcd.md 文档，并附带文件生成时间等属性
2.完成博客的攥写
启动hugo hugo server 1.该命令用于启动hugo服务器，并生成本地地址
2.在本地浏览器对页面进行预览确定页面显示没有错误
生成public hugo --baseUrl=&amp;#34;uprightclear.github.io/&amp;#34; --buildDrafts 1.更新public文件夹
cd public 2.进入public文件夹
更新代码 1.查看当前的git仓库状态，可以使用git status
git status 2.更新全部
git add * 3.输入git commit -m “更新备注”
git commit -m “更新备注” 4.先git pull,拉取当前分支最新代码（也就是获取GitHub上的最新代码信息，更新本地代码）
git pull 5.push到远程master分支上（修改本地代码后，再更新GitHub上的代码）
git push origin master </description>
    </item>
    
    <item>
      <title>Leetcode 刷题报告 #1</title>
      <link>uprightclear.github.io/2020/05/leetcode01/</link>
      <pubDate>Tue, 05 May 2020 17:09:06 +0800</pubDate>
      
      <guid>uprightclear.github.io/2020/05/leetcode01/</guid>
      <description>1.两数之和 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/two-sum 著作权归领扣网络所有。
题解(Java) class Solution {public int[] twoSum(int[] nums, int target) {Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();for (int i = 0; i &amp;lt; nums.</description>
    </item>
    
    <item>
      <title>联系</title>
      <link>uprightclear.github.io/%E8%81%94%E7%B3%BB/</link>
      <pubDate>Mon, 24 Feb 2020 12:35:25 +0800</pubDate>
      
      <guid>uprightclear.github.io/%E8%81%94%E7%B3%BB/</guid>
      <description>邮箱:uprightclear@gmail.com
微博:https://weibo.com/uprightclear
B站:https://space.bilibili.com/10095445</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>uprightclear.github.io/%E5%85%B3%E4%BA%8E/</link>
      <pubDate>Mon, 24 Feb 2020 12:34:51 +0800</pubDate>
      
      <guid>uprightclear.github.io/%E5%85%B3%E4%BA%8E/</guid>
      <description>uprightclear的个人主页 分享技术/分享生活</description>
    </item>
    
    <item>
      <title>My First Blog</title>
      <link>uprightclear.github.io/2020/02/my-first-blog/</link>
      <pubDate>Mon, 24 Feb 2020 11:30:04 +0800</pubDate>
      
      <guid>uprightclear.github.io/2020/02/my-first-blog/</guid>
      <description>这个博客主要就是用来记录一下我的学习历程，偶尔可能会写一些其他杂七杂八的东西。还有markdown格式我还是需要再好好研究一下QAQ。</description>
    </item>
    
  </channel>
</rss>